<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浪客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://ccit18081430213.github.io/"/>
  <updated>2020-04-08T07:42:04.697Z</updated>
  <id>https://ccit18081430213.github.io/</id>
  
  <author>
    <name>Yin Jun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何从零开始搭建一个hexo博客</title>
    <link href="https://ccit18081430213.github.io/2020/03/12/markdown/"/>
    <id>https://ccit18081430213.github.io/2020/03/12/markdown/</id>
    <published>2020-03-12T06:47:13.000Z</published>
    <updated>2020-04-08T07:42:04.697Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽说是网站，对于个人来说，或许一般叫作博客。<br>但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和善用搜索引擎）</p><p>接下来就是我安装hexo博客的过程</p><p>一. 下载和安装Node.js和Git</p><p>二. 安装 Hexo</p><p>三. 创建 Hexo </p><h1 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h1><pre><code>- Hexo- 静态博客- 无服务器</code></pre><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><blockquote><p><strong>什么是 Node.js ？</strong></p><p>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。</p><p><a href="https://baike.baidu.com/item/node.js/7567977" target="_blank" rel="noopener">Node.js | 百度百科</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript | MDN</a></p></blockquote><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>Windows 打开命令提示符，后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入 <code>node --version</code>，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p>如下图</p><p><img src="../assets/123.png" alt="" loading="lazy"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><blockquote><p>Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/" target="_blank" rel="noopener">Git LFS</a>。）</p></blockquote><p>下载 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html" target="_blank" rel="noopener">这里</a>）</p><blockquote><p>类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><p>Git也是全部默认下一步进行安装。</p><p>在cmd窗口输入git 若若结果列出Git的各种用法，则表示Git安装成功。</p><p>如下图</p><p><img src="../assets/44049.png" alt="" loading="lazy"></p><h2 id="三-安装hexo"><a href="#三-安装hexo" class="headerlink" title="三.安装hexo"></a>三.安装hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></p><ul><li>GitHub: <a href="http://github.com/hexojs/hexo" target="_blank" rel="noopener">http://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><p>所有必备的应用程序安装完成后，即可使用 npm 或者git来安装 Hexo。(建议使用git来安装,这样会比较方便。)</p><p>在安装之前我建议你先创个blog文件，就是存放的你的hexo，然后在在文件夹中空白处鼠标右键打开git bash here。</p><p><img src="../assets/git.png" alt="" loading="lazy"></p><p>在终端中输入以下命令：</p><pre class=" language-zhongwen"><code class="language-zhongwen">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g</code></pre><blockquote><p><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。<br><code>install</code> 自然是安装。<br><code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>如下图</p><p><img src="../assets/8145548.png" alt="" loading="lazy"></p><p>输入hexo -v，检查hexo是否安装成功 ，如下</p><p><img src="../assets/45738.png" alt="" loading="lazy"></p><p>这样hexo就已经安装成功了。不过还要创建hexo。</p><h2 id="四-创建hexo"><a href="#四-创建hexo" class="headerlink" title="四.创建hexo"></a>四.创建hexo</h2><p>这样准备工作就完成了，接下来就开始正式创建hexo。</p><p>在你刚才创建的文件夹还是在文件夹空白处点击Git，然后输入hexo init，初始化你的文件夹。</p><p><img src="../assets/50853.png" alt="" loading="lazy"></p><p><img src="../assets/2644.png" alt="" loading="lazy"></p><p>如果你看到后面的“Start blogging with Hexo！”，就说明文件夹初始化完成。</p><p>最后第二步就是输入npm install，安装所需要的组件。</p><p><img src="../assets/152806.png" alt="" loading="lazy"></p><p>这时候，我们的本地hexo就已经建好了。</p><p>最后一步就是输入hexo s,开启服务器，就可以本地访问网站了。</p><p><img src="../assets/QQ%E6%88%AA%E5%9B%BE20200408153115.png" alt="" loading="lazy"></p><p>在游览器中打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以本地访问了。</p><p><img src="../assets/QQ%E6%88%AA%E5%9B%BE20200408153251.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo搭建" scheme="https://ccit18081430213.github.io/categories/hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://ccit18081430213.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>wanzhang</title>
    <link href="https://ccit18081430213.github.io/2020/03/02/wanzhang/"/>
    <id>https://ccit18081430213.github.io/2020/03/02/wanzhang/</id>
    <published>2020-03-02T04:21:46.000Z</published>
    <updated>2020-03-02T04:22:20.318Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>this is my hexo</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://ccit18081430213.github.io/2020/03/02/title/"/>
    <id>https://ccit18081430213.github.io/2020/03/02/title/</id>
    <published>2020-03-02T04:21:10.000Z</published>
    <updated>2020-04-06T02:38:15.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注:标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例:</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h5 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h5><h6 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h6><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><p>示例:</p><p><strong>这是加粗的文字</strong> <em>这是倾斜的文字</em>` <strong><em>这是斜体加粗的文字</em></strong> <del>这是加删除线的文字</del></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用-、+和*作为列表标记：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue<br>有序列表则使用数字加英文句点.来表示：</li></ul><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol></blockquote><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<em>或-代表加粗，一个</em>或-代表斜体，~~代表删除。<br><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del></p><h1 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h1><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：<br>图片：<img src="" alt="" loading="lazy">    <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片文本(可忽略)" loading="lazy"></p><p>链接：<a href=""></a>     <a href="链接地址">链接文本</a><br>链接又分为行内式、参考式和 自动链接：<br>这是行内式链接：<a href="http://connorlin.github.io" target="_blank" rel="noopener">ConnorLin’s Blog</a>。</p><p>这是参考式链接：<a href="http://connorlin.github.io/" target="_blank" rel="noopener" title="ConnorLin&#39;s Blog">ConnorLin’s Blog</a>，其中url为链接标记，可置于文中任意位置。</p><p>链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="http://connorlin.github.io" target="_blank" rel="noopener">http://connorlin.github.io</a></p><p>这是图片：<img src="https://connorlin.github.io/images/avatar.jpg" alt="" loading="lazy"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码分为行内代码和代码块。</p><p>行内代码使用 <code>代码</code> 标识，可嵌入文字中</p><p>代码块使用4个空格或```标识</p><pre><code>这里是代码</code></pre><p>代码语法高亮在 ```后面加上空格和语言名称即可</p><pre class=" language-语言"><code class="language-语言">//注意语言前面有空格这里是代码</code></pre><p>例如：这是行内代码<code>onCreate(Bundle savedInstanceState)</code>的例子。</p><p>这是代码块和语法高亮：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注意java前面有空格</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格对齐格式</p><p>居左：:—-<br>居中：:—-:或—–<br>居右：—-:<br>|标题|标题|标题|<br>|:—|:—:|—:|<br>|居左测试文本|居中测试文本|居右测试文本|<br>|居左测试文本1|居中测试文本2|居右测试文本3|<br>|居左测试文本11|居中测试文本22|居右测试文本33|<br>|居左测试文本111|居中测试文本222|居右测试文本333|</p><p>#分隔线<br>在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。</p><hr><hr><hr><hr><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>在行尾添加两个空格加回车表示换行：<br>这是一行后面加两个空格  换行</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>使用[^]来定义脚注：<br>这是一个脚注的例子<a href="这里是脚注">^1</a></p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p><u>下划线文本</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="语法" scheme="https://ccit18081430213.github.io/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="https://ccit18081430213.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://ccit18081430213.github.io/2020/03/02/hello-world/"/>
    <id>https://ccit18081430213.github.io/2020/03/02/hello-world/</id>
    <published>2020-03-02T03:02:14.801Z</published>
    <updated>2020-04-04T14:54:30.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
