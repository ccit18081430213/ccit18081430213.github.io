<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>浪客</title>
  
  <subtitle>记录生活中的点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://yjxsbiubiu.top/"/>
  <updated>2020-05-28T05:45:55.457Z</updated>
  <id>https://yjxsbiubiu.top/</id>
  
  <author>
    <name>Yin Jun</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>第三方支持</title>
    <link href="https://yjxsbiubiu.top/2020/05/27/title-2/"/>
    <id>https://yjxsbiubiu.top/2020/05/27/title-2/</id>
    <published>2020-05-27T08:40:09.000Z</published>
    <updated>2020-05-28T05:45:55.457Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Valine"><a href="#Valine" class="headerlink" title="Valine"></a>Valine</h3><p>参见 <a href="https://valine.js.org/" target="_blank" rel="noopener">Valine</a> 官方文档进行配置。语言默认跟随 Hexo 的语言设置。</p><p>即 Hexo 根目录下的 <code>_config.yml</code>。（注意与主题的 <code>_config.yml</code> 相区分）</p><pre class=" language-yml"><code class="language-yml">language: zh-CN</code></pre><p>实际上，你只需要参考下方页面获取配置所需的 appId 和 appKey 即可。（不需要安装，主题默认使用 CDN。模版也已经内置。）</p><blockquote><p><a href="https://valine.js.org/quickstart.html#获取APP-ID-和-APP-Key" target="_blank" rel="noopener">快速开始 - 获取 APP ID 和 APP Key</a></p></blockquote><p>Valine 的扩展和增强功能可以参考 <a href="https://github.com/DesertsP/Valine-Admin" target="_blank" rel="noopener">Valine-Admin</a>，可以对具体的评论进行邮件提醒。</p><p>注意：刚配置完ID和KEY，不一定会出现评论页面，但等一会儿就有了。</p><p><a href="https://valine.js.org/configuration.html" target="_blank" rel="noopener">更多配置项</a></p><h3 id="如何绑定你的自定义域名？"><a href="#如何绑定你的自定义域名？" class="headerlink" title="如何绑定你的自定义域名？"></a>如何绑定你的自定义域名？</h3><p>首先，你得有个自己的域名。</p><blockquote><p>避免广告嫌疑，你可以自行前往相关域名提供商购买。<br><del>但是如果你有幸能看到谷歌广告（概率较小），可以考虑点一点。</del><br>我是在腾讯云买的域名，在浏览器搜腾讯云，然后登录找到域名与网站的域名管理，然后购买的你的域名，我买的是top域名，前面是你随便输入的英文字母<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9jZG4uanNkZWxpdnIubmV0L2doL0NDSVQxODEwMTAzMDIxNFRQSi9yZXNvdXJjZS8vMi5wbmc?x-oss-process=image/format,png" alt="" loading="lazy"><br>并使用 CNAME 解析到 <code>你的名字.github.io</code>。（当然 A 记录直接解析到 GitHub Pages IP 地址也可以。）</p></blockquote><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain" target="_blank" rel="noopener">Managing a custom domain for your GitHub Pages site</a></p></blockquote><p>在 <code>Hexo</code> 工作目录下 <code>source</code> 文件夹下新建 <code>CNAME</code> 文件（没有后缀名）。</p><blockquote><p>CNAME 即相当于告诉 GitHub 允许将 xxx.github.io 为你的域名提供服务。<br>source 目录下的文件除了特殊的 markdown 会被解析为 html，其余都会原样复制到生成的静态文件夹中。<br>所以你需要在 source 文件夹下建有 CNAME，它会在生成静态文件时，将 CNAME 拷贝到静态文件夹并部署到 master 分支。<br>如果只是在 GitHub 上设置（<code>项目地址页面 -&gt; Settings -&gt; Options -&gt; GitHub Pages -&gt; Custom domain</code>），它会自动添加到 master 分支上，但随后不包含 CNAME 的部署会将其覆盖。</p></blockquote><p>内容填写你的域名即可。</p><blockquote><p><a href="https://help.github.com/en/github/working-with-github-pages/about-custom-domains-and-github-pages" target="_blank" rel="noopener">About custom domains and GitHub Pages</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo 搭建" scheme="https://yjxsbiubiu.top/categories/Hexo-%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://yjxsbiubiu.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>PicGo为GitHub搭建图床</title>
    <link href="https://yjxsbiubiu.top/2020/05/27/title-1/"/>
    <id>https://yjxsbiubiu.top/2020/05/27/title-1/</id>
    <published>2020-05-27T08:21:40.000Z</published>
    <updated>2020-05-27T08:39:25.633Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>#前言 </p><p>CDN的全称是Content Delivery Network，即内容分发网络。CDN是构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN的关键技术主要有内容存储和分发技术</p><h2 id="1-先下载PinGo"><a href="#1-先下载PinGo" class="headerlink" title="1.先下载PinGo"></a>1.先下载PinGo</h2><p>PinGo下载地址：<a href="https://github.com/Molunerfinn/picgo/releases" target="_blank" rel="noopener">https://github.com/Molunerfinn/picgo/releases</a></p><h2 id="2-生成token"><a href="#2-生成token" class="headerlink" title="2.生成token"></a>2.生成token</h2><p><img src="../CDN/5.png" alt="" loading="lazy"></p><p><img src="../CDN/6.png" alt="" loading="lazy"></p><p> <img src="../CDN/7.png" alt="" loading="lazy">)<img src="../CDN/9.png" alt="" loading="lazy"></p><p>复制生成的token，（注意勿要关闭网页这个token将不再出现）</p><h2 id="3-配置PinGo"><a href="#3-配置PinGo" class="headerlink" title="3.配置PinGo"></a>3.配置PinGo</h2><p><img src="../CDN/10.png" alt="" loading="lazy"></p><p>最下面的设定自定义域名：</p><p>| <a href="https://cdn.jsdelivr.net/gh/CCIT18101030213/CDN/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/CCIT18101030213/CDN/</a> </p><p>| <a href="https://cdn.jsdelivr.net/gh/用户名/仓库名/" target="_blank" rel="noopener">https://cdn.jsdelivr.net/gh/用户名/仓库名/</a></p><p>配置完就可以使用了。但要注意图床是任何人都能看到的，不要上传私密照片。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="Hexo搭建" scheme="https://yjxsbiubiu.top/categories/Hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="图床" scheme="https://yjxsbiubiu.top/tags/%E5%9B%BE%E5%BA%8A/"/>
    
  </entry>
  
  <entry>
    <title>yun主题使用指南</title>
    <link href="https://yjxsbiubiu.top/2020/04/17/qwer/"/>
    <id>https://yjxsbiubiu.top/2020/04/17/qwer/</id>
    <published>2020-04-17T01:48:59.000Z</published>
    <updated>2020-05-27T08:06:11.733Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>渲染器</p><p>如果您没有 <code>pug</code> 与 <code>stylus</code> 的渲染器，请先安装： <a href="https://github.com/hexojs/hexo-renderer-pug" target="_blank" rel="noopener">hexo-renderer-pug</a> （这个是　 Hexo 官方在维护，但是好像没有下面的星多，更新的勤快。） 或<a href="https://github.com/maxknee/hexo-render-pug" target="_blank" rel="noopener">hexo-render-pug</a> （以及前者尚未支持开发时热更新，后者支持。） 和 <a href="https://github.com/hexojs/hexo-renderer-stylus" target="_blank" rel="noopener">hexo-renderer-stylus</a></p><pre><code>npm install hexo-render-pug hexo-renderer-stylus --save# oryarn add hexo-render-pug hexo-renderer-stylus</code></pre><h3 id="安装主题"><a href="#安装主题" class="headerlink" title="安装主题"></a>安装主题</h3><p>进入您的 Hexo 博客根目录，克隆或下载 <code>hexo-theme-yun</code> 主题，置于 <code>themes/yun</code>。</p><blockquote><p>你也可以考虑加上 <code>--depth 1</code> 的参数来只克隆当前版本（体积更下，速度更快）。</p></blockquote><pre class=" language-sh"><code class="language-sh">git clone -b master https://github.com/YunYouJun/hexo-theme-yun themes/yun</code></pre><blockquote><p>如果你使用了持续集成，并希望每次构建的版本保持稳定。你可以 fork 本项目，然后克隆你 fork 的项目。</p><pre class=" language-sh"><code class="language-sh">git clone -b master https://github.com/你的名字/hexo-theme-yun themes/yun</code></pre></blockquote><p>如果你想体验新版 <code>hexo-theme-yun</code>。主题创始人（<a href="https://www.yunyoujun.cn/" target="_blank" rel="noopener">云游君的小站</a> 将始终使用最新版作为示例。）</p><pre><code>git clone -b dev https://github.com/YunYouJun/hexo-theme-yun themes/yun</code></pre><h3 id="启用主题"><a href="#启用主题" class="headerlink" title="启用主题"></a>启用主题</h3><p>修改 Hexo 站点配置文件 <code>_config.yml</code></p><pre class=" language-sh"><code class="language-sh"># 将主题设置为 hexo-theme-yuntheme: yun</code></pre><h3 id="配置主题"><a href="#配置主题" class="headerlink" title="#配置主题"></a><a href="https://yun.yunyoujun.cn/guide/#配置主题" target="_blank" rel="noopener">#</a>配置主题</h3><p>在 Hexo 工作目录下新建 <code>source/_data/yun.yml</code>。（若 <code>source/_data</code> 目录不存在，请新建。）</p><p>采用约定大于配置的方式，您仅需在 <code>yun.yml</code> 中自定义您想要覆盖的配置，其余将自动与主题默认配置合并。（这样做也更方便日后的升级）</p><blockquote><p>你可以参考我的配置文件 <a href="https://github.com/YunYouJun/yunyoujun.github.io/blob/hexo/source/_data/yun.yml" target="_blank" rel="noopener">yun.yml - yunyoujun.github.io</a>，是不是很短。<br>这勉强也算本主题的一个优化功能，当然你选择全部覆盖也是没问题的。</p></blockquote><p>TIP</p><p>如：</p><p><code>avatar</code> 的完整配置如下</p><pre class=" language-yml"><code class="language-yml">avatar:  url: /images/avatar.jpg  rounded: true  opacity: 1</code></pre><p>你可以在 <code>yun.yml</code> 中仅定义（当然，全部覆盖也是可以的）</p><pre class=" language-yml"><code class="language-yml">avatar:  url: /images/avatar.jpg</code></pre><h3 id="升级主题"><a href="#升级主题" class="headerlink" title="升级主题"></a>升级主题</h3><p>如果您是在 <code>yun.yml</code> 中进行配置，那么仅需在 Hexo 工作路径中输入以下命令：</p><pre class=" language-sh"><code class="language-sh">cd themes/yungit pull</code></pre><p>如果您修改了主题的 <code>themes/yun/_config.yml</code> 配置文件，那么您升级时可能会遭遇冲突，需要自行调整。</p><blockquote><p>WARNING</p></blockquote><blockquote><p>请最好不要对主题的任何文件进行修改，除非你确认你拥有一定的开发能力或此后将不会对主题进行升级。</p></blockquote><h3 id="自动升级"><a href="#自动升级" class="headerlink" title="自动升级"></a>自动升级</h3><p>你想要完全自动更新，时刻保持最新主题，可以采用持续集成（如 GitHub Actions, <a href="https://travis-ci.com/" target="_blank" rel="noopener">Travis</a> 等）。</p><p>你可以参考我的 GitHub Action 配置文件 <a href="https://github.com/YunYouJun/yunyoujun.github.io/blob/hexo/.github/workflows/gh-pages.yml" target="_blank" rel="noopener">gh-pages.yml</a>。(照抄配置，放在对应文件夹下即可，GitHub Actions 为 GitHub 自带的服务。) 若你没有使用 <code>algolia_search</code>，请删除 <code>algolia</code> 相关部分。</p><blockquote><p>我采用的是这种做法，但我从良心上并不推荐你也如此，因为这是我自己的主题，自然对潜在的 BUG 拥有一定的容忍度。<br>时刻保持与仓库版本相同，可能会遇到新引入的 BUG。<br>当然你愿意当小白鼠的话，可以一试。顺便给咱反馈问题。个人角度上，是十分欢迎的。</p></blockquote><p>如果你想要克隆稳定版本的主题，你可以自行 fork，然后修改源项目地址为你 fork 后的项目地址即可。</p><pre class=" language-yml"><code class="language-yml">run: |  git clone -b dev https://github.com/YunYouJun/hexo-theme-yun.git themes/yun</code></pre><p>关于主题配置你可以参考 <a href="https://yun.yunyoujun.cn/" target="_blank" rel="noopener">Yun 主题文档</a> 或直接在 <code>theme/yun/_config.yml</code> 中查看，并根据自己的需要进行配置。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo主题" scheme="https://yjxsbiubiu.top/categories/hexo%E4%B8%BB%E9%A2%98/"/>
    
    
      <category term="主题" scheme="https://yjxsbiubiu.top/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>唯美句子</title>
    <link href="https://yjxsbiubiu.top/2020/04/17/index/"/>
    <id>https://yjxsbiubiu.top/2020/04/17/index/</id>
    <published>2020-04-17T01:27:46.000Z</published>
    <updated>2020-04-17T01:49:49.303Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>1，你说我的眼睛灿若星辰，那是因为你是星辰，而我的眼中只有你。</p><p>2，温暖的夏日，一杯香浓的咖啡，一份美味的冰淇淋，青春就是这么甜美。</p><p>3，站在青春的夕阳下，感受着过往，留下浅浅的笑靥，这大概就是我们的狂欢过得青春。</p><p><img src="/CDN/1_180118163821_1.jpg" alt="" loading="lazy"></p><p>4，用迷离的舞步，跟随着最后一丝月光的脚步。</p><p>5，烟花过后，空气中都充斥着一种浓浓的味道，证明它曾经灿烂过。</p><p>6，巴黎铁塔，见证多少情人的分离</p><p>7，音乐是灵魂寄宿的天堂，人向往的光明。</p><p>8，掩埋了泪眼的斑驳，在转角之后扣上故事门锁</p><p>9，大海之于小溪，阳光之于地球，蓝天之于白云，棉花糖之于小朋友，美梦之于你，你之于我。</p><p>10，我喜欢那些闪光的东西，比如冬日的雪花，天上的星星，还有你的眼睛。</p><p>11，一个人的生活就像童话，只是没有王子，我也不是公主</p><p>12，春阳灿灿，夏山如碧，秋蜩抱朴，冬日烈烈，皆愿与君长相随。</p><p>13，看天空的云，堆在了一起。看躺在地上的你，微笑的脸庞。</p><p>14，快乐很简单，就是春天的鲜花，夏天的绿荫，秋天的野果，冬天的漫天飞雪。</p><p>15，想找个保鲜盒把你给我的那些感动都装起来当我不那么喜欢你的时候就拿出来回味一下</p><p>16，无数的花瓣轻轻摇曳，积攒着彩虹般的梦，承载着我的<a href="http://www.xuejuzi.cn/sinian/32455.html" target="_blank" rel="noopener">思念</a>。</p><p>17，你是我心上一棵万年青</p><p>18，友谊和花香一样，还是淡一点的比较好，越淡的香气越使人依恋，也越能持久。</p><p>19，勇敢的不是我，是因爲你溫暖了我的手。</p><p>20，像华丽的燕尾蝶，失去往日的光彩、变作一片枯死的叶。旋转，飞扬、最后，深陷于龌龊的沼泽。</p><p><img src="/CDN/1_180118163829_1.jpg" alt="" loading="lazy"></p><p>21，往事不必再提，<a href="http://www.xuejuzi.cn/renshengganwu/32450.html" target="_blank" rel="noopener">人生</a>已多风雨，我只愿风止于秋水，而我止于你。</p><p>22，你说你要给我蒙娜丽莎的微笑，那你就要对我绽放微笑。</p><p>23，妳的眼睛在閃光燈下折射璀璨的光，唯壹想到的詞是流光溢彩。</p><p>24，看见石头凌空而起，形成一道彩虹般弧线。</p><p>25，他的微笑百看不腻，像阳光柔和干净。</p><p>26，人生是花，而爱是花蜜</p><p>27，问花花不语为谁开为谁落怨春色三分半随流水、半随尘埃。</p><p>28，最美好的时光，是为一个人付出一切时的勇敢。</p><p>29，我有一个秘密花园，里面装着那些年，我和你的记忆。</p><p>30，想变成太阳花，永远对着太阳笑。</p><p>31，青春在微笑中如花绽放※。</p><p>32，如果我说我要环游世界我可不可以围着你转一圈</p><p>33，糖的滋味，甜蜜而温暖。所有美好的一切。</p><p>34，无处不在的假象与幻想，梦想一边成长一边灭亡</p><p>35，心底最柔软的阳光、来自于你孩子般的模样</p><p>36，刚切开的西瓜，是初恋的颜色。</p><p>37，阳光在每个裂缝中散落。</p><p>38，愿你身畔有一人，始终小心护住你的孩子气，爱着你，像深巷传来酒香，闻之即醉。~</p><p>39，我遁着岁月的足迹，走过散落一地的旖旎，寻找流年深处的一季花雨。</p><p>40，想变成仲夏夜的一只萤火虫，只要抓住你的注意力，就已经满足了。</p><p><img src="/CDN/1_180118163836_1.jpg" alt="" loading="lazy"></p><p>41，距离从不会分开两颗真正在乎彼此的心。</p><p>42，流星，只献给我们最美的那一刹那。</p><p>43，牵手一份<a href="http://www.xuejuzi.cn/shuoshuo/32364.html" target="_blank" rel="noopener">爱情</a>，渴望相伴一生、不离不弃</p><p>44，你我情如白雪，永远不染尘。</p><p>45，我们依然是彼此天空中最亮的那颗星星//</p><p>46，时间是外在的光斑，还是心跳微妙的浮点。</p><p>47，最浪漫的事非“左手牵你、右手写爱”莫属</p><p>48，在角落唱沙哑的歌，再大声也都是给你，请用心听，不要说话。</p><p>49，安静地阅读一本书，嘴角带着静如止水的笑。</p><p>50，青春如此华美，却在烟火在散场。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="语录" scheme="https://yjxsbiubiu.top/categories/%E8%AF%AD%E5%BD%95/"/>
    
    
      <category term="唯美" scheme="https://yjxsbiubiu.top/tags/%E5%94%AF%E7%BE%8E/"/>
    
  </entry>
  
  <entry>
    <title>1.如何从零开始搭建一个hexo博客</title>
    <link href="https://yjxsbiubiu.top/2020/03/12/markdown/"/>
    <id>https://yjxsbiubiu.top/2020/03/12/markdown/</id>
    <published>2020-03-12T06:47:13.000Z</published>
    <updated>2020-04-09T02:31:30.025Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>虽说是网站，对于个人来说，或许一般叫作博客。<br>但我不希望它仅仅是一个博客，而是能够成为一个处于自己现实生活之外、自由、实验、不用畏惧他人眼光甚至可以独断专行的地方。我会从整体上对搭建网站的流程和使用到的技术及步骤进行介绍我希望看完此篇文章后，此前对此方面知识一无所知的小白，到最后也能搭建出一个属于自己的站点。（前提是认识基础的英语单词和善用搜索引擎）</p><p>接下来就是我安装hexo博客的过程</p><p>一. 下载和安装Node.js和Git</p><p>二. 安装 Hexo</p><p>三. 创建 Hexo </p><h1 id="关键词"><a href="#关键词" class="headerlink" title="关键词"></a>关键词</h1><pre><code>- Hexo- 静态博客- 无服务器</code></pre><h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><h2 id="1-安装Node-js"><a href="#1-安装Node-js" class="headerlink" title="1.安装Node.js"></a>1.安装Node.js</h2><blockquote><p><strong>什么是 Node.js ？</strong></p><p>这得从什么是 JS 说起，JS 也就是 JavaScript。（为什么有种从盘古开天辟地开始的感觉）没错，JavaScript 就是网页的盘古。JavaScript 是一种编程语言，我们所见到的网页中的交互和逻辑处理几乎都是由 JavaScript 完成。<br>JavaScript 语法简单，易学易用。（当然也请不要小瞧它，虽然它入门门槛低，但上限同样也很高。包括但不限于实现网站前后端，手机桌面应用程序，机器学习，计算机图形学等。）<br>在 Node.js 诞生前，JavaScript 都运行于浏览器端。也就是说，它是鱼，浏览器是装满了水的水缸。<br>2008 年，Chrome V8 诞生。2009 年，Node.js 诞生。并成为 GitHub 早期最著名的开源项目。GitHub 可能大家已有所了解，后续再说。<br>Node.js 便是一个基于 Chrome V8 引擎的 JavaScript 运行环境。（当年第一次看到这句话时，我也一脸懵逼。）按照我的理解，JavaScript 是鱼，Chrome V8 就是抽水机，Node.js 则把这台抽水机也装在你电脑上。于是你的电脑也有了 Node.js 这个和浏览器相似的水缸，也可以在里面运行 JavaScript 了！<br>当然 Node.js 和浏览器端还是因为自身定位和一些历史原因而有些许区别的，不再展开。</p><p><a href="https://baike.baidu.com/item/node.js/7567977" target="_blank" rel="noopener">Node.js | 百度百科</a></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript" target="_blank" rel="noopener">JavaScript | MDN</a></p></blockquote><p><a href="https://nodejs.org/zh-cn/" target="_blank" rel="noopener">下载｜ Node.js</a></p><p>建议下载<strong>长期支持版</strong>而非<strong>当前发布版</strong>（因为如果是最新版，容易出现一些奇妙的 bug）。</p><p>全部默认下一步进行安装。</p><p>Windows 打开命令提示符，后续如提到输入命令，均默认指打开终端进行输入。</p><p>输入 <code>node --version</code>，如果得到的版本号与你方才安装的一致，那么 Node.js 就已经成功安装。</p><p>如下图</p><p><img src="/CDN/123.png" alt="" loading="lazy"></p><h2 id="2-安装Git"><a href="#2-安装Git" class="headerlink" title="2.安装Git"></a>2.安装Git</h2><blockquote><p>Git 是一个开源的分布式版本控制系统，由 Linus Torvalds（同时也是 Linux 的作者）为了管理 Linux 开发而开发。<br>简而言之，是一个版本管理工具。譬如设计师设计好了第三版的海报，客户却说还是要第一版吧，这时便可以通过 Git 快速回退到最初的版本。<br>你只需要把每次更改的状态（Git 会自动进行检测，你只要掌握基础的几条命令就可以了）告诉 Git，而不需要每个版本都保存一份压缩包，既方便也能大大节约空间。<br>（当然这主要只对代码文本起作用，因为 Git 的本质是记录各行代码的增减，倘若是像视频、海报这类二进制文件来说便体现不出丝毫优势了。当然想要应对这种场景还有 <a href="https://git-lfs.github.com/" target="_blank" rel="noopener">Git LFS</a>。）</p></blockquote><p>下载 <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a> 并安装（如果国内速度太慢，可以试试<a href="https://pc.qq.com/detail/13/detail_22693.html" target="_blank" rel="noopener">这里</a>）</p><blockquote><p>类似的工具还有：SVN。但始终更推荐 Git，因为它功能更为强大且它的背后还有更强大的生态：GitHub。</p></blockquote><p>Git也是全部默认下一步进行安装。</p><p>在cmd窗口输入git 若若结果列出Git的各种用法，则表示Git安装成功。</p><p>如下图</p><p><img src="/CDN/44049.png" alt="" loading="lazy"></p><h2 id="三-安装hexo"><a href="#三-安装hexo" class="headerlink" title="三.安装hexo"></a>三.安装hexo</h2><p><a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a></p><ul><li>GitHub: <a href="http://github.com/hexojs/hexo" target="_blank" rel="noopener">http://github.com/hexojs/hexo</a></li><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a>（直接参考文档也是一个不错的选择）</li></ul><p>所有必备的应用程序安装完成后，即可使用 npm 或者git来安装 Hexo。(建议使用git来安装,这样会比较方便。)</p><p>在安装之前我建议你先创个blog文件，就是存放的你的hexo，然后在在文件夹中空白处鼠标右键打开git bash here。</p><p><img src="/CDN/git.png" alt="" loading="lazy"></p><p>在终端中输入以下命令：</p><pre class=" language-zhongwen"><code class="language-zhongwen">npm install hexo-cli -g# 如果安装失败，可能是没有权限，可以尝试头部加上 sudo 重新执行# sudo npm install hexo-cli -g</code></pre><blockquote><p><code>npm</code> 是随 Node.js 一起被安装的包管理工具，你可以理解成 Node.js 自带的应用商店。<br><code>install</code> 自然是安装。<br><code>hexo-cli</code> 则是 <code>hexo</code> 的终端工具，可以帮助你生成一些模版文件，之后再用到。<br><code>-g</code> 代表的是全局安装。也就是在任何地方都可以使用，否则会只能在安装的目录下使用。</p></blockquote><p>如下图</p><p><img src="/CDN/8145548.png" alt="" loading="lazy"></p><p>输入hexo -v，检查hexo是否安装成功 ，如下</p><p><img src="/CDN/45738.png" alt="" loading="lazy"></p><p>这样hexo就已经安装成功了。不过还要创建hexo。</p><h2 id="四-创建hexo"><a href="#四-创建hexo" class="headerlink" title="四.创建hexo"></a>四.创建hexo</h2><p>这样准备工作就完成了，接下来就开始正式创建hexo。</p><p>在你刚才创建的文件夹还是在文件夹空白处点击Git，然后输入hexo init，初始化你的文件夹。</p><p><img src="/CDN/50853.png" alt="" loading="lazy"></p><p><img src="/CDN/2644.png" alt="" loading="lazy"></p><p>如果你看到后面的“Start blogging with Hexo！”，就说明文件夹初始化完成。</p><p>最后第二步就是输入npm install，安装所需要的组件。</p><p><img src="/CDN/152806.png" alt="" loading="lazy"></p><p>这时候，我们的本地hexo就已经建好了。</p><p>最后一步就是输入hexo s,开启服务器，就可以本地访问网站了。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200408153115.png" alt="" loading="lazy"></p><p>在游览器中打开 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 就可以本地访问了。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200408153251.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo搭建" scheme="https://yjxsbiubiu.top/categories/hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://yjxsbiubiu.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>2.hexo部署博客到GitHub</title>
    <link href="https://yjxsbiubiu.top/2020/03/02/wanzhang/"/>
    <id>https://yjxsbiubiu.top/2020/03/02/wanzhang/</id>
    <published>2020-03-02T04:21:46.000Z</published>
    <updated>2020-04-17T08:06:35.793Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>这个过程也就只有三步：</p><p>一： GitHub注册</p><p>二： githubSHH配置</p><p>三： hexo本地使用</p><h1 id="一-注册GitHub"><a href="#一-注册GitHub" class="headerlink" title="一. 注册GitHub"></a>一. 注册GitHub</h1><blockquote><p>GitHub 一听便与 Git 有所渊源。<code>Git</code> 在英文中是懒人、饭桶之意。<code>Hub</code> 则是中心、集线器的意思。譬如 USB 集线器就是 USB Hub。所以 GitHub 就是饭桶中心（<del>大雾</del>）。<br>GitHub 是全世界最大的开源项目与代码托管平台，也是众多开发者的交流场所。<del>还是全球最大的同性交友网站</del>。<br>而代码托管本身用到的正是上文提到的 Git 技术。</p></blockquote><p>注册 <a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> 账号。（虽然都是英文，但不必畏惧，也并不会造成使用障碍，只要记得最常用的选项含义即可，以及善用手头的翻译软件。）</p><blockquote><p>注意：注册时的英文用户名将成为你可以使用的免费域名前缀。</p></blockquote><p>登录 GitHub。</p><blockquote><p>为什么要用 GitHub？<br>对于平民玩家来说，在初次尝试建立自己的网站时，也许并不会有闲钱或者说决心来购买自己的服务器与域名。<br>而 GitHub 则提供了 <a href="https://pages.github.com/" target="_blank" rel="noopener">GitHub Pages</a> 这一服务。<br>用户们可以利用这一服务，部署自己的静态站点。</p></blockquote><p>点击右上角的 <code>+</code> -&gt; <code>New repository</code> 新建仓库。(仓库名必须是你刚刚注册的使用的用户名加.github.io ，如：我的github用户名是ccit18081430213，那我的仓库名必须设置为ccit18081430213.github.io )</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200409105359.png" alt="" loading="lazy"></p><blockquote><p>我这里因为已经有同名仓库，所以提示了重复。</p></blockquote><p>仓库名称务必为 <code>你的用户名.github.io</code>，用户名是英文，大小写无所谓，但建议统一小写。（因为你会发现时常切换大小写很麻烦）</p><blockquote><p>为什么必须这个作为仓库名？<br>GitHub Pages 服务的命名规范，同时它也将成为你的专属域名。当然，你也可以购置自己的专属域名并用它来提供内容。</p></blockquote><p>最后就是点击<code>Create repository</code>就行了。</p><p>最后就出现了这个页面</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200409110130.png" alt="" loading="lazy"></p><h1 id="二-githubSHH配置"><a href="#二-githubSHH配置" class="headerlink" title="二.githubSHH配置"></a>二.githubSHH配置</h1><h2 id="在-github-上添加-SSH-key-的步骤："><a href="#在-github-上添加-SSH-key-的步骤：" class="headerlink" title="在 github 上添加 SSH key 的步骤："></a>在 github 上添加 SSH key 的步骤：</h2><h4 id="1、首先需要检查你电脑是否已经有-SSH-key"><a href="#1、首先需要检查你电脑是否已经有-SSH-key" class="headerlink" title="1、首先需要检查你电脑是否已经有 SSH key"></a>1、首先需要检查你电脑是否已经有 SSH key</h4><p>运行 git Bash 客户端，输入如下代码：</p><pre><code>$ cd ~/.ssh$ ls</code></pre><p>这两个命令就是检查是否已经存在 id_rsa.pub 或 id_dsa.pub 文件，如果文件已经存在，那么你可以跳过步骤2，直接进入步骤3。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417102530.png" alt="" loading="lazy"></p><h4 id="2、创建一个-SSH-key"><a href="#2、创建一个-SSH-key" class="headerlink" title="2、创建一个 SSH key"></a>2、创建一个 SSH key</h4><pre><code>$ ssh-keygen -t rsa -C &quot;your_email@example.com&quot;</code></pre><p>代码参数含义：</p><p>-t 指定密钥类型，默认是 rsa ，可以省略。<br>-C 设置注释文字，比如邮箱。<br>-f 指定密钥文件存储文件名。</p><p>以上代码省略了 -f 参数，因此，运行上面那条命令后会让你输入一个文件名，用于保存刚才生成的 SSH key 代码，如：</p><pre><code>Generating public/private rsa key pair.# Enter file in which to save the key (/c/Users/you/.ssh/id_rsa): [Press enter]</code></pre><p>当然，你也可以不输入文件名，使用默认文件名（推荐），那么就会生成 id_rsa 和 id_rsa.pub 两个秘钥文件。</p><p>接着又会提示你输入两次密码（该密码是你push文件的时候要输入的密码，而不是github管理者的密码），</p><p>当然，你也可以不输入密码，直接按回车。那么push的时候就不需要输入密码，直接提交到github上了，如：</p><pre class=" language-zhengwen"><code class="language-zhengwen">Enter passphrase (empty for no passphrase): # Enter same passphrase again:</code></pre><p>接下来，就会显示如下代码提示，如：</p><pre><code>Your identification has been saved in /c/Users/you/.ssh/id_rsa.# Your public key has been saved in /c/Users/you/.ssh/id_rsa.pub.# The key fingerprint is:# 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@example.com</code></pre><p>当你看到上面这段代码的，那就说明，你的 SSH key 已经创建成功，你只需要添加到github的SSH key上就可以了。</p><h4 id="3、添加你的-SSH-key-到-github上面去"><a href="#3、添加你的-SSH-key-到-github上面去" class="headerlink" title="3、添加你的 SSH key 到 github上面去"></a>3、添加你的 SSH key 到 github上面去</h4><p>a、首先你需要拷贝 id_rsa.pub 文件的内容，你可以用编辑器打开文件复制，也可以用git命令复制该文件的内容，如：</p><pre><code>$ clip &lt; ~/.ssh/id_rsa.pub</code></pre><p>b、登录你的github账号，从右上角的设置（ <a href="https://github.com/settings" target="_blank" rel="noopener">Account Settings</a> ）进入，然后点击菜单栏的 SSH key 进入页面添加 SSH key。</p><p>c、点击 Add SSH key 按钮添加一个 SSH key 。把你复制的 SSH key 代码粘贴到 key 所对应的输入框中，记得 SSH key 代码的前后不要留有空格或者回车。当然，上面的 Title 所对应的输入框你也可以输入一个该 SSH key 显示在 github 上的一个别名。默认的会使用你的邮件名称。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417103205_%E7%88%B1%E5%A5%87%E8%89%BA.jpg" alt="" loading="lazy"></p><h3 id="4、测试一下该SSH-key"><a href="#4、测试一下该SSH-key" class="headerlink" title="4、测试一下该SSH key"></a>4、测试一下该SSH key</h3><p>在git Bash 中输入以下代码</p><pre><code>$ ssh -T git@github.com</code></pre><p>当你输入以上代码时，会有一段警告代码，如：</p><pre><code>The authenticity of host &#39;github.com (207.97.227.239)&#39; can&#39;t be established.# RSA key fingerprint is 16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.# Are you sure you want to continue connecting (yes/no)?</code></pre><p>这是正常的，你输入 yes 回车既可。如果你创建 SSH key 的时候设置了密码，接下来就会提示你输入密码，如：</p><pre><code>Enter passphrase for key &#39;/c/Users/Administrator/.ssh/id_rsa&#39;:</code></pre><p>当然如果你密码输错了，会再要求你输入，知道对了为止。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417103619.png" alt="" loading="lazy"></p><p>注意：输入密码时如果输错一个字就会不正确，使用删除键是无法更正的。</p><p>密码正确后你会看到下面这段话，如：</p><pre><code>Hi username! You&#39;ve successfully authenticated, but GitHub does not# provide shell access.</code></pre><p>如果用户名是正确的,你已经成功设置SSH密钥。如果你看到 “access denied” ，者表示拒绝访问，那么你就需要使用 https 去访问，而不是 SSH 。</p><h1 id="三-本地使用"><a href="#三-本地使用" class="headerlink" title="三.本地使用"></a>三.本地使用</h1><p>之前已经是https的链接，现在想要用SSH提交怎么办？<br>直接修改项目目录下 <code>.git</code>文件夹下的<code>config</code>文件，将地址修改一下就好了。</p><p>建议你们安装一个<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vs code</a>,这样会比较方便一些。</p><p>之前已经是https的链接，现在想要用SSH提交怎么办？<br>直接修改项目目录下 <code>.git</code>文件夹下的<code>config</code>文件，将地址修改一下就好了。</p><p>git地址获取可以看如下图切换。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417111025.png" alt="" loading="lazy"></p><p>复制SSH，然后再打开<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">vs code</a>，如果刚开始打开这个软件就要去打开你创建的blog文件夹，就会出现很多，然后你只要找到<code>_config.yml</code>,然后一直往下拉，就会找到deploy,把repo改一下就行了.如果没有就要自己去填写。</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417154013_%E7%88%B1%E5%A5%87%E8%89%BA.jpg" alt="" loading="lazy"></p><p>就已经完成了。</p><h1 id="四-完成部署"><a href="#四-完成部署" class="headerlink" title="四.完成部署"></a>四.完成部署</h1><p>最后一步，最后一步，快要成功了，键入指令：</p><p><code>hexo generate</code></p><p><code>hexo deploy</code></p><p>注意：每次修改本地文件后，需要键入hexo generate才能保存。每次使用命令时，都要在C:\Hexo目录下。每次想要上传文件到Github时，就应该先键入hexo generate保存之后，再键入hexo deploy。大概成功之后是酱紫的：</p><p><img src="/CDN/QQ%E6%88%AA%E5%9B%BE20200417160027.png" alt="" loading="lazy"></p><p>OK，我们的博客就已经完全搭建起来了，在浏览器输入（当然，是你的用户名）<strong><a href="https://napoleon940911.github.io/" target="_blank" rel="noopener">https://napoleon940911.github.io/</a></strong></p><p>会发现原来几乎空白的网页，已经变成了前面我们在本地通过 <strong><a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000</a></strong> 所访问到的网页了！</p><p><img src="/CDN/20181126134523456.png" alt="" loading="lazy"></p><p>如果测试发现 <strong>GitHub Pages</strong> 还是没有任何变化，不要着急，等几分钟之后再次刷新即可。</p><p>至此，我们就已经成功将本地的 <strong>Hexo</strong> 仓库部署到 <strong>GitHub</strong> 上了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="hexo搭建" scheme="https://yjxsbiubiu.top/categories/hexo%E6%90%AD%E5%BB%BA/"/>
    
    
      <category term="hexo" scheme="https://yjxsbiubiu.top/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Markdown语法</title>
    <link href="https://yjxsbiubiu.top/2020/03/02/title/"/>
    <id>https://yjxsbiubiu.top/2020/03/02/title/</id>
    <published>2020-03-02T04:21:10.000Z</published>
    <updated>2020-04-06T02:38:15.107Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h1><p>一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。<br>注:标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。</p><p>示例:</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h5 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h5><h6 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h6><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h1 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h1><p>斜体<br>要倾斜的文字左右分别用一个*号包起来</p><p>斜体加粗<br>要倾斜和加粗的文字左右分别用三个*号包起来</p><p>删除线<br>要加删除线的文字左右分别用两个~~号包起来</p><p>示例:</p><p><strong>这是加粗的文字</strong> <em>这是倾斜的文字</em>` <strong><em>这是斜体加粗的文字</em></strong> <del>这是加删除线的文字</del></p><h1 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h1><p>无序列表使用-、+和*作为列表标记：</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue<br>有序列表则使用数字加英文句点.来表示：</li></ul><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h1 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h1><p>引用以&gt;来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol></blockquote><h1 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h1><p>两个<em>或-代表加粗，一个</em>或-代表斜体，~~代表删除。<br><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del></p><h1 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h1><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：<br>图片：<img src="" alt="" loading="lazy">    <img src="%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片文本(可忽略)" loading="lazy"></p><p>链接：<a href=""></a>     <a href="链接地址">链接文本</a><br>链接又分为行内式、参考式和 自动链接：<br>这是行内式链接：<a href="http://connorlin.github.io" target="_blank" rel="noopener">ConnorLin’s Blog</a>。</p><p>这是参考式链接：<a href="http://connorlin.github.io/" target="_blank" rel="noopener" title="ConnorLin&#39;s Blog">ConnorLin’s Blog</a>，其中url为链接标记，可置于文中任意位置。</p><p>链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="http://connorlin.github.io" target="_blank" rel="noopener">http://connorlin.github.io</a></p><p>这是图片：<img src="https://connorlin.github.io/images/avatar.jpg" alt="" loading="lazy"></p><h1 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h1><p>代码分为行内代码和代码块。</p><p>行内代码使用 <code>代码</code> 标识，可嵌入文字中</p><p>代码块使用4个空格或```标识</p><pre><code>这里是代码</code></pre><p>代码语法高亮在 ```后面加上空格和语言名称即可</p><pre class=" language-语言"><code class="language-语言">//注意语言前面有空格这里是代码</code></pre><p>例如：这是行内代码<code>onCreate(Bundle savedInstanceState)</code>的例子。</p><p>这是代码块和语法高亮：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 注意java前面有空格</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h1 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h1><p>表格对齐格式</p><p>居左：:—-<br>居中：:—-:或—–<br>居右：—-:<br>|标题|标题|标题|<br>|:—|:—:|—:|<br>|居左测试文本|居中测试文本|居右测试文本|<br>|居左测试文本1|居中测试文本2|居右测试文本3|<br>|居左测试文本11|居中测试文本22|居右测试文本33|<br>|居左测试文本111|居中测试文本222|居右测试文本333|</p><p>#分隔线<br>在一行中用三个以上的*、-、_来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。</p><hr><hr><hr><hr><h1 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h1><p>在行尾添加两个空格加回车表示换行：<br>这是一行后面加两个空格  换行</p><h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><p>使用[^]来定义脚注：<br>这是一个脚注的例子<a href="这里是脚注">^1</a></p><h1 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h1><p><u>下划线文本</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
      <category term="语法" scheme="https://yjxsbiubiu.top/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
      <category term="Markdown" scheme="https://yjxsbiubiu.top/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://yjxsbiubiu.top/2020/03/02/hello-world/"/>
    <id>https://yjxsbiubiu.top/2020/03/02/hello-world/</id>
    <published>2020-03-02T03:02:14.801Z</published>
    <updated>2020-04-04T14:54:30.854Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Hello-Hexo"><a href="#Hello-Hexo" class="headerlink" title="Hello Hexo"></a>Hello Hexo</h2><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;\assets\css\APlayer.min.css&quot;&gt;&lt;script src=&quot;\assets\js\APlayer.min.js&quot; cla
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
